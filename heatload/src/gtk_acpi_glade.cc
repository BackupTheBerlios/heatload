// generated 2002/12/12 14:57:26 CET by thoma@Tiger.(none)
// using glademm V1.1.2a_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/thoma/Berlios/heatload/heatload.glade
// for gtk 1.2.10 and gtkmm 1.2.10
//
// Please modify the corresponding derived classes in ./src/gtk_acpi.cc

#include "config.h"
#include "gtk_acpi_glade.hh"
#include <gtk--/label.h>
#include <gtk--/table.h>
#include <gtk--/eventbox.h>

gtk_acpi_glade::gtk_acpi_glade(
) : Gtk::Window(GTK_WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *gtk_acpi = this;
   label_decoration = manage(new class Gtk::Label("TEXT"));
   frame_draw = manage(new class Gtk::Frame());
   label_cooling = manage(new class Gtk::Label("label7"));
   label_ac = manage(new class Gtk::Label("label2"));
   label_fan_ = manage(new class Gtk::Label("Fan:"));
   label_ac_ = manage(new class Gtk::Label("AC:"));
   label_temp_ = manage(new class Gtk::Label("Temp.:"));
   label_load_ = manage(new class Gtk::Label("Load:"));
   label_bat1 = manage(new class Gtk::Label("label6"));
   label_bat1_ = manage(new class Gtk::Label("Bat.1:"));
   label_load = manage(new class Gtk::Label("label9"));
   
   Gtk::Label *label1 = manage(new class Gtk::Label(""));
   label_temp = manage(new class Gtk::Label("label4"));
   
   Gtk::Table *table2 = manage(new class Gtk::Table(5, 5, false));
   frame_label = manage(new class Gtk::Frame());
   
   Gtk::Table *table3 = manage(new class Gtk::Table(2, 2, false));
   Gtk::EventBox *eventbox = manage(new class Gtk::EventBox());
   Gtk::Table *table1 = manage(new class Gtk::Table(1, 1, false));
   label_decoration->set_alignment(0.5,0.5);
   label_decoration->set_padding(0,0);
   label_decoration->set_justify(GTK_JUSTIFY_CENTER);
   label_decoration->set_line_wrap(false);
   frame_draw->set_shadow_type(GTK_SHADOW_NONE);
   frame_draw->set_label_align(0,0);
   label_cooling->set_alignment(0,0.5);
   label_cooling->set_padding(0,0);
   label_cooling->set_justify(GTK_JUSTIFY_CENTER);
   label_cooling->set_line_wrap(false);
   label_ac->set_alignment(0,0.5);
   label_ac->set_padding(0,0);
   label_ac->set_justify(GTK_JUSTIFY_CENTER);
   label_ac->set_line_wrap(false);
   label_fan_->set_alignment(0,0.5);
   label_fan_->set_padding(0,0);
   label_fan_->set_justify(GTK_JUSTIFY_CENTER);
   label_fan_->set_line_wrap(false);
   label_ac_->set_alignment(0,0.5);
   label_ac_->set_padding(0,0);
   label_ac_->set_justify(GTK_JUSTIFY_CENTER);
   label_ac_->set_line_wrap(false);
   label_temp_->set_alignment(0,0.5);
   label_temp_->set_padding(0,0);
   label_temp_->set_justify(GTK_JUSTIFY_CENTER);
   label_temp_->set_line_wrap(false);
   label_load_->set_alignment(0,0.5);
   label_load_->set_padding(0,0);
   label_load_->set_justify(GTK_JUSTIFY_CENTER);
   label_load_->set_line_wrap(false);
   label_bat1->set_alignment(0,0.5);
   label_bat1->set_padding(0,0);
   label_bat1->set_justify(GTK_JUSTIFY_CENTER);
   label_bat1->set_line_wrap(false);
   label_bat1_->set_alignment(0,0.5);
   label_bat1_->set_padding(0,0);
   label_bat1_->set_justify(GTK_JUSTIFY_CENTER);
   label_bat1_->set_line_wrap(false);
   label_load->set_alignment(0,0.5);
   label_load->set_padding(0,0);
   label_load->set_justify(GTK_JUSTIFY_CENTER);
   label_load->set_line_wrap(false);
   label1->set_usize(4,-1);
   label1->set_alignment(0,0.5);
   label1->set_padding(0,0);
   label1->set_justify(GTK_JUSTIFY_CENTER);
   label1->set_line_wrap(false);
   label_temp->set_alignment(7.45058e-09,0.5);
   label_temp->set_padding(0,0);
   label_temp->set_justify(GTK_JUSTIFY_CENTER);
   label_temp->set_line_wrap(false);
   table2->set_row_spacings(0);
   table2->set_col_spacings(0);
   table2->attach(*label_cooling, 4, 5, 0, 1, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_ac, 4, 5, 1, 2, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_fan_, 3, 4, 0, 1, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_ac_, 3, 4, 1, 2, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_temp_, 0, 1, 0, 1, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_load_, 0, 1, 1, 2, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_bat1, 1, 4, 3, 4, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_bat1_, 0, 1, 3, 4, GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label_load, 1, 2, 1, 2, GTK_FILL, GTK_SHRINK, 0, 0);
   table2->attach(*label1, 2, 3, 0, 2, GTK_EXPAND|GTK_FILL, 0, 0, 0);
   table2->attach(*label_temp, 1, 2, 0, 1, GTK_EXPAND|GTK_FILL, GTK_SHRINK, 0, 0);
   frame_label->set_shadow_type(GTK_SHADOW_NONE);
   frame_label->set_label_align(0,0);
   frame_label->add(*table2);
   table3->set_row_spacings(0);
   table3->set_col_spacings(0);
   table3->attach(*label_decoration, 0, 2, 0, 1, GTK_EXPAND|GTK_SHRINK|GTK_FILL, GTK_SHRINK, 0, 0);
   table3->attach(*frame_draw, 1, 2, 1, 2, GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   table3->attach(*frame_label, 0, 1, 1, 2, GTK_EXPAND|GTK_FILL, GTK_EXPAND|GTK_FILL, 0, 0);
   eventbox->set_events(GDK_KEY_PRESS_MASK | GDK_KEY_RELEASE_MASK | GDK_LEAVE_NOTIFY_MASK);
   eventbox->set_flags(GTK_CAN_FOCUS);
   eventbox->grab_focus();
   eventbox->add(*table3);
   table1->set_row_spacings(0);
   table1->set_col_spacings(0);
   table1->attach(*eventbox, 0, 1, 0, 1, GTK_EXPAND|GTK_SHRINK|GTK_FILL, GTK_EXPAND|GTK_SHRINK|GTK_FILL, 0, 0);
   gtk_acpi->set_events(GDK_KEY_PRESS_MASK | GDK_KEY_RELEASE_MASK);
   gtk_acpi->set_title("HeatLoad");
   gtk_acpi->set_modal(false);
   gtk_acpi->set_position(GTK_WIN_POS_NONE);
   gtk_acpi->set_policy(true, true, true);
   gtk_acpi->add(*table1);
   label_decoration->show();
   frame_draw->show();
   label_cooling->show();
   label_ac->show();
   label_fan_->show();
   label_ac_->show();
   label_temp_->show();
   label_load_->show();
   label_bat1->show();
   label_bat1_->show();
   label_load->show();
   label1->show();
   label_temp->show();
   table2->show();
   frame_label->show();
   table3->show();
   eventbox->show();
   table1->show();
   gtk_acpi->show();
   gtk_acpi->delete_event.connect(SigC::slot(this, &gtk_acpi_glade::on_gtk_acpi_delete_event));
   gtk_acpi->key_press_event.connect(SigC::slot(this, &gtk_acpi_glade::on_gtk_acpi_key_press_event));
}

gtk_acpi_glade::~gtk_acpi_glade()
{  
}
